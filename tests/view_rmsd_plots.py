#!/usr/bin/env python
"""
Utility script to display the generated RMSD vs Score plots.

This script can be used to view the plots generated by test_rmsd_vs_score.py
without running the full test suite.

Usage:
    python view_rmsd_plots.py

Note: Requires matplotlib to be installed.
"""

import os
import sys
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

def main():
    # Check if plots exist
    output_dir = os.path.join(os.path.dirname(__file__), 'output')
    
    if not os.path.exists(output_dir):
        print(f"Error: Output directory not found: {output_dir}")
        print("Please run test_rmsd_vs_score.py first to generate plots.")
        sys.exit(1)
    
    plots = [
        'rmsd_vs_score_pair.png',
        'rmsd_vs_score_tetramer.png',
        'rmsd_vs_score_octet.png',
        'rmsd_vs_score_all_samplers.png'
    ]
    
    # Check which plots exist
    existing_plots = []
    for plot in plots:
        plot_path = os.path.join(output_dir, plot)
        if os.path.exists(plot_path):
            existing_plots.append((plot, plot_path))
        else:
            print(f"Warning: Plot not found: {plot}")
    
    if not existing_plots:
        print("Error: No plots found in output directory.")
        print("Please run test_rmsd_vs_score.py first to generate plots.")
        sys.exit(1)
    
    # Display plots
    print(f"\nFound {len(existing_plots)} plots:")
    for plot_name, _ in existing_plots:
        print(f"  - {plot_name}")
    
    # Create figure with subplots
    n_plots = len(existing_plots)
    if n_plots == 1:
        fig, axes = plt.subplots(1, 1, figsize=(10, 8))
        axes = [axes]
    elif n_plots <= 4:
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        axes = axes.flatten()
    else:
        rows = (n_plots + 1) // 2
        fig, axes = plt.subplots(rows, 2, figsize=(16, 6*rows))
        axes = axes.flatten()
    
    # Display each plot
    for idx, (plot_name, plot_path) in enumerate(existing_plots):
        img = mpimg.imread(plot_path)
        axes[idx].imshow(img)
        axes[idx].axis('off')
        title = plot_name.replace('_', ' ').replace('.png', '').title()
        axes[idx].set_title(title, fontsize=12, pad=10)
    
    # Hide unused subplots
    for idx in range(len(existing_plots), len(axes)):
        axes[idx].axis('off')
    
    plt.tight_layout()
    print("\nDisplaying plots... (close window to exit)")
    plt.show()

if __name__ == '__main__':
    main()
